<?xml version="1.0" encoding="UTF-8"?>
<web-app version="2.5" 
	xmlns="http://java.sun.com/xml/ns/javaee" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xsi:schemaLocation="http://java.sun.com/xml/ns/javaee 
	http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd">
	
	<display-name>qmp-Quartermaster Management Platform</display-name>
	<!-- 默认日志使用监听器 -->
	<listener>
		<listener-class>com.fawns.service.common.listener.MybatisLogListener</listener-class>
	</listener>
	<!-- Spring 容器启动监听器 -->
	<listener>
		<listener-class>
			org.springframework.web.context.ContextLoaderListener
		</listener-class>
	</listener>
	
	<!-- Spring 刷新Introspector防止内存泄露 --> 
	<listener>  
		<listener-class>  
			org.springframework.web.util.IntrospectorCleanupListener  
		</listener-class>  
	</listener>  
	
	<!-- 设置Spring容器加载配置文件路径 -->
	<context-param> 
        <param-name>contextConfigLocation</param-name> 
        <param-value>
        	classpath*:/config/spring/applicationContext.xml
        	classpath*:/config/spring/applicationContext-shiro.xml
        </param-value>
    </context-param>
    
    <!-- Spring character filter 处理乱码--> 
    <filter>
        <filter-name>encodingFilter</filter-name> 
        <filter-class> 
        org.springframework.web.filter.CharacterEncodingFilter 
        </filter-class> 
        <init-param> 
            <param-name>encoding</param-name> 
            <param-value>UTF-8</param-value> 
        </init-param> 
    </filter> 
    <filter-mapping> 
        <filter-name>encodingFilter</filter-name> 
        <url-pattern>/*</url-pattern> 
    </filter-mapping>
    
    <!-- Shiro过滤器  filter-name对应applicationContext.xml中定义的名字为“shiroFilter”的bean -->
    <filter>
		<filter-name>shiroFilter</filter-name>
		<filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
		<init-param>
			<param-name>targetFilterLifecycle</param-name>
			<param-value>true</param-value>
		</init-param>
	</filter>
	
	<!-- 使用“/*”匹配所有请求，保证所有的可控请求都经过Shiro的过滤。通常这个filter-mapping 
	放置到最前面(其他filter-mapping前面)，保证它是过滤器链中第一个起作用的 --> 
	<filter-mapping>
		<filter-name>shiroFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>
	
    <!-- 配置Spring核心控制器 -->
    <servlet>
        <servlet-name>dispatcher</servlet-name> 
        <servlet-class> 
        	org.springframework.web.servlet.DispatcherServlet 
        </servlet-class> 
        <init-param> 
           <param-name>contextConfigLocation</param-name> 
           <param-value><!-- dispatcher-servlet.xml文件路径 --> 
           		classpath:/config/spring/dispatcher-servlet.xml 
           </param-value> 
          </init-param> 
        <load-on-startup>1</load-on-startup> 
    </servlet> 
    <servlet-mapping> 
        <servlet-name>dispatcher</servlet-name> 
        <url-pattern>/</url-pattern> 
    </servlet-mapping>

	<servlet>
		<servlet-name>ConnectorServlet</servlet-name>
		<servlet-class>
			net.fckeditor.connector.ConnectorServlet
		</servlet-class>
		<load-on-startup>1</load-on-startup>
	</servlet>

	<servlet-mapping>
		<servlet-name>ConnectorServlet</servlet-name>
		<!-- Do not wrap this line otherwise Glassfish will fail to load this file -->
		<url-pattern>/app/admin/styles/fckeditor/editor/filemanager/connectors/*</url-pattern>
	</servlet-mapping>
	
	<!-- 初始化字典信息 -->
	<servlet>
    	<servlet-name>InitDicionary</servlet-name>
    	<servlet-class>com.fawns.service.common.filter.DictionaryUtil</servlet-class>
    	<load-on-startup>2</load-on-startup>
    </servlet>
    
	<servlet-mapping>
   	<servlet-name>InitDicionary</servlet-name>
   	<url-pattern>/InitDicionary</url-pattern>
   </servlet-mapping>
   
    <!-- captcha servlet config--> 
	<servlet>  
	    <servlet-name>CaptchaServlet</servlet-name>  
	    <servlet-class>com.fawns.service.common.captcha.CaptchaServlet</servlet-class>  
	</servlet>  
	<servlet-mapping>  
	    <servlet-name>CaptchaServlet</servlet-name>  
	    <url-pattern>/servlet/captchaCode</url-pattern>  
	</servlet-mapping> 
   
    <!-- Configuration of Log4j log4j的配置 --> 
     <context-param> 
        <param-name>log4jConfigLocation</param-name> 
        <param-value><!-- log4j.properties文件路径 --> 
        classpath:/property/log4j.properties
        </param-value> 
    </context-param> 
    <context-param> 
        <param-name>log4jRefreshInterval</param-name> 
        <param-value>60000</param-value> 
    </context-param> 
    <listener> 
        <listener-class> 
        org.springframework.web.util.Log4jConfigListener 
        </listener-class> 
    </listener>
    
    <!-- session过期时间 -->
    <session-config>
		<session-timeout>1200</session-timeout>
	</session-config>
	
	<welcome-file-list>  
		<welcome-file>/index.jsp</welcome-file> 
	</welcome-file-list>
	
	<!-- 配置常见错误页面 -->
	<error-page>
		<exception-type>java.lang.Throwable</exception-type>
		<location>/app/admin/page/common/error/500.jsp</location>
	</error-page>
	<error-page>
		<error-code>500</error-code>
		<location>/app/admin/page/common/error/500.jsp</location>
	</error-page>
	<error-page>
		<error-code>404</error-code>
		<location>/app/admin/page/common/error/404.jsp</location>
	</error-page>
	<error-page>
		<error-code>403</error-code>
		<location>/app/admin/page/common/error/403.jsp</location>
	</error-page>	
</web-app>
